 const shuffle = (array:number[]) => {
    let newArray = [...array]
    for ( let i = newArray.length - 1; i > 0; i-- ) {
        const j = Math.floor( Math.random() * ( i + 1 ) );
        [ newArray[ i ], newArray[ j ] ] = [ newArray[ j ], newArray[ i ] ];
    }
    return newArray;
  }

  const generateNewBoard = () => {
    
  }
  
  const checkBoard = () => {
    const isUnique = (arr: (number | null)[]) =>
      arr.every((item, index) => {
        return item === null || arr.indexOf(item) === index;
      });

    let solved = true;

    for (let i = 0; i < SIZE; i++) {
      const row = [];

      for (let j = 0; j < SIZE; j++) {
        row.push(board[i * SIZE + j]);
      }

      if (!isUnique(row)) {
        solved = false;
        break;
      }

      row.length = 0;
      for (let j = 0; j < SIZE; j++) {
        // if (board[i * SIZE + j] === null) {
        //   solved = false;
        //   break outer;
        // }
        row.push(board[i + SIZE * j]);
      }

      if (!isUnique(row)) {
        solved = false;
        break;
      }
    }

    if (solved) {
      alert("Congrats! You solved it!");
    } else {
      alert("Sorry... you messed up somewhere.");
    }
  };

  const findNextEmptyCell = () => {
    const nextEmptyCell = board.indexOf(null);
    if (nextEmptyCell === -1) return null;
    const row = Math.floor(nextEmptyCell/SIZE);
    const col = nextEmptyCell%SIZE;
    const box = 3 * (Math.floor(row/3)) + Math.floor(col/3);
    return [row, col, box, nextEmptyCell];
  }

  const checkValidRow = (row: number, val: number) => {
    let nums = new Set<number|null>();
    for(let i = 0; i < SIZE; i++){
      let curr = row * SIZE + i;
      nums.add(board[curr]);
    }
    return (!nums.has(val));
  }

  const checkValidCol = (col: number, val: number) => {
    let nums = new Set<number|null>();
    for(let i = 0; i < SIZE; i++){
      let curr = i * SIZE + col;
      nums.add(board[curr]);
    }
    return (!nums.has(val));
  }
  /* boxes: 
  0 1 2
  3 4 5
  6 7 8 */
  const checkValidBox = (box: number, val: number) => {
    let nums = new Set<number|null>();
    const start = 27 * Math.floor(box/3) + 3 * (box%3);
    for(let i = 0; i < 9; i++){
      let curr = start + i%3 + 9 * Math.floor(i/3);
      nums.add(board[curr]);
    }
    return (!nums.has(val));